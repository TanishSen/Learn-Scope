Here's a **complete, professional Replit AI prompt** for your full-stack web app called **Learn Scope**, integrating your Figma design and including all development instructions.

---

## 🧠 Replit AI Prompt for Building "Learn Scope" – Peer-to-Peer Learning Platform

**App Name**: Learn Scope
**Type**: Full-Stack Web Application
**Main Idea**: Peer-to-Peer Learning via Audio/Video Interface
**Design**: I will add a **Figma file** for the UI/UX design — **build the app UI exactly as shown** in the Figma file.

---

## 🎯 Project Overview

Create a fully functional, production-ready, full-stack web application called **Learn Scope**, designed to facilitate **peer-to-peer learning for college students** through **real-time audio/video communication**, secure registration, recorded sessions, and a reward system.

The app should be visually **identical to the provided Figma design**, responsive, clean, and accessible.

---

## 🛠️ Core Features

### 🔐 User Authentication & Registration

* Free registration with **college ID upload**
* Email/password-based login system with email verification
* JWT-based secure authentication
* User profile includes:

  * Name, email, college, subjects of expertise, preferred languages
* College ID validation required to ensure trusted community
* Profile management page (edit details, view stats)

---

### 📞 Live Help Section

* Users request help by selecting:

  * Topics
  * Preferred language
  * Urgency status (urgent or non-urgent)
* Real-time **broadcast of requests** to eligible users via **Socket.io**
* Users can **send request** to join an audio/video session
* Requester can review responder’s profile before accepting
* Real-time **WebRTC-based audio/video calling**
* Call features:

  * Mute, video toggle, end call
  * Call duration: **max 45 minutes**
  * Cooldown: **24-hour wait** before connecting with same user again
* If no one responds to an **urgent** request within 30 minutes, fallback to a **support team**

---

### 📹 Recorded Sessions

* All calls are recorded **securely**
* After call ends, both users are asked for **consent to upload**
* Only if **both agree**, the session is added to the **Recorded Section**
* Features of Recorded Section:

  * Playback of previous sessions
  * Filter/search by topic/language
  * While waiting for help, users are suggested relevant videos

---

### 🛡️ Safety & Moderation

* In-call **end and report** button
* To report a user, prior call history is required
* If a user is reported **50+ times**, moderators review their calls
* **Verified violations** lead to **permanent ban**
* Admin panel to manage reports and users

---

### 🏆 Reward System

* Tracks time spent helping others in calls
* **1 reward point per 3 hours** of support provided
* Dashboard showing:

  * Time helped
  * Points earned
  * Redeemable gifts (Bluetooth speakers, coupons, merch)
* Rewards configurable from admin dashboard

---

## 💻 Tech Stack

### Frontend

* **React.js** with Hooks and Context API
* **Tailwind CSS** or use styling from Figma as provided
* Fully **responsive** and **mobile-first**

### Backend

* **Node.js** with **Express.js**
* **MongoDB** with **Mongoose**
* **Socket.io** for real-time help requests
* **WebRTC** for video/audio calls
* **Multer** for file uploads (college ID, video)
* **JWT** for authentication
* **Bcrypt** for password hashing

---

## 🗃️ Database Structure (MongoDB)

* **Users**: `name`, `email`, `collegeID`, `subjects`, `languages`, `rewardPoints`, `callHistory`
* **Calls**: `participants`, `topic`, `language`, `duration`, `recordingURL`, `consents`
* **Reports**: `reporter`, `reportedUser`, `callID`, `reason`
* **Rewards**: `userID`, `points`, `redemptionHistory`
* **Topics**: `name`, `language`

---

## 🛡️ Security Practices

* Password hashing
* Input validation/sanitization
* CSRF/XSS protection
* File upload validation (type/size)
* API rate limiting
* JWT + Refresh tokens

---

## 🎨 UI/UX Requirements

* Use the **provided Figma design**
* UI must match design **pixel-by-pixel**
* Include:

  * Loading states
  * Form validation
  * Error handling
  * Toast notifications or modals for feedback
* Fully responsive for mobile and desktop
* Accessibility (screen reader support, ARIA tags)

---

## 🧑‍💻 Development Flow (Phases)

### Phase 1 – Setup & Authentication

* Project structure
* MongoDB integration
* User registration/login with college ID upload
* JWT-based authentication

### Phase 2 – Live Help System

* Help request form with topic/language input
* WebRTC integration for video/audio calls
* Real-time matching using Socket.io

### Phase 3 – Recorded Section

* Dual-consent recording
* Secure video storage
* Search/filter and video recommendations

### Phase 4 – Safety System

* Report user system with validation
* Admin panel for moderation
* Auto-ban logic for flagged users

### Phase 5 – Rewards & Dashboard

* Help time tracking
* Reward point logic
* Redemption system and user dashboard

---

## 📎 Replit Agent Instructions

✅ Use **modern React patterns** (Hooks, Context API)
✅ Build **UI exactly** as per the **Figma design** (which I’ll upload)
✅ Keep **mobile responsiveness** and **accessibility** in mind
✅ Prioritize **error handling**, **validation**, and **user feedback**
✅ Create a **clean project structure** with detailed **code comments**
✅ Include a full **README with setup instructions** for deployment

---

## 🧪 Follow-up Prompts I Might Use

* “Implement the UI as per this new Figma screen”
* “Add better validation for user registration form”
* “Make the dashboard more interactive and stats-driven”
* “Deploy the backend to Render and frontend to Vercel”
* “Add forgot password and email verification feature”
* “Optimize video uploads for lower bandwidth”

---

Let me know if you'd like a **README template**, **starter folder structure**, or help with preparing your **Figma link for Replit**.
